from _typeshed import Incomplete
from twilio.base.obsolete import deprecated_method as deprecated_method
from twilio.twiml import TwiML as TwiML, format_language as format_language

class VoiceResponse(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...
    def connect(self, action: Incomplete | None = ..., method: Incomplete | None = ..., **kwargs): ...
    def dial(self, number: Incomplete | None = ..., action: Incomplete | None = ..., method: Incomplete | None = ..., timeout: Incomplete | None = ..., hangup_on_star: Incomplete | None = ..., time_limit: Incomplete | None = ..., caller_id: Incomplete | None = ..., record: Incomplete | None = ..., trim: Incomplete | None = ..., recording_status_callback: Incomplete | None = ..., recording_status_callback_method: Incomplete | None = ..., recording_status_callback_event: Incomplete | None = ..., answer_on_bridge: Incomplete | None = ..., ring_tone: Incomplete | None = ..., recording_track: Incomplete | None = ..., sequential: Incomplete | None = ..., refer_url: Incomplete | None = ..., refer_method: Incomplete | None = ..., **kwargs): ...
    def echo(self, **kwargs): ...
    def enqueue(self, name: Incomplete | None = ..., action: Incomplete | None = ..., max_queue_size: Incomplete | None = ..., method: Incomplete | None = ..., wait_url: Incomplete | None = ..., wait_url_method: Incomplete | None = ..., workflow_sid: Incomplete | None = ..., **kwargs): ...
    def gather(self, input: Incomplete | None = ..., action: Incomplete | None = ..., method: Incomplete | None = ..., timeout: Incomplete | None = ..., speech_timeout: Incomplete | None = ..., max_speech_time: Incomplete | None = ..., profanity_filter: Incomplete | None = ..., finish_on_key: Incomplete | None = ..., num_digits: Incomplete | None = ..., partial_result_callback: Incomplete | None = ..., partial_result_callback_method: Incomplete | None = ..., language: Incomplete | None = ..., hints: Incomplete | None = ..., barge_in: Incomplete | None = ..., debug: Incomplete | None = ..., action_on_empty_result: Incomplete | None = ..., speech_model: Incomplete | None = ..., enhanced: Incomplete | None = ..., **kwargs): ...
    def hangup(self, **kwargs): ...
    def leave(self, **kwargs): ...
    def pause(self, length: Incomplete | None = ..., **kwargs): ...
    def play(self, url: Incomplete | None = ..., loop: Incomplete | None = ..., digits: Incomplete | None = ..., **kwargs): ...
    def queue(self, name, url: Incomplete | None = ..., method: Incomplete | None = ..., reservation_sid: Incomplete | None = ..., post_work_activity_sid: Incomplete | None = ..., **kwargs): ...
    def record(self, action: Incomplete | None = ..., method: Incomplete | None = ..., timeout: Incomplete | None = ..., finish_on_key: Incomplete | None = ..., max_length: Incomplete | None = ..., play_beep: Incomplete | None = ..., trim: Incomplete | None = ..., recording_status_callback: Incomplete | None = ..., recording_status_callback_method: Incomplete | None = ..., recording_status_callback_event: Incomplete | None = ..., transcribe: Incomplete | None = ..., transcribe_callback: Incomplete | None = ..., **kwargs): ...
    def redirect(self, url, method: Incomplete | None = ..., **kwargs): ...
    def reject(self, reason: Incomplete | None = ..., **kwargs): ...
    def say(self, message: Incomplete | None = ..., voice: Incomplete | None = ..., loop: Incomplete | None = ..., language: Incomplete | None = ..., **kwargs): ...
    def sms(self, message, to: Incomplete | None = ..., from_: Incomplete | None = ..., action: Incomplete | None = ..., method: Incomplete | None = ..., status_callback: Incomplete | None = ..., **kwargs): ...
    def pay(self, input: Incomplete | None = ..., action: Incomplete | None = ..., bank_account_type: Incomplete | None = ..., status_callback: Incomplete | None = ..., status_callback_method: Incomplete | None = ..., timeout: Incomplete | None = ..., max_attempts: Incomplete | None = ..., security_code: Incomplete | None = ..., postal_code: Incomplete | None = ..., min_postal_code_length: Incomplete | None = ..., payment_connector: Incomplete | None = ..., payment_method: Incomplete | None = ..., token_type: Incomplete | None = ..., charge_amount: Incomplete | None = ..., currency: Incomplete | None = ..., description: Incomplete | None = ..., valid_card_types: Incomplete | None = ..., language: Incomplete | None = ..., **kwargs): ...
    def prompt(self, for_: Incomplete | None = ..., error_type: Incomplete | None = ..., card_type: Incomplete | None = ..., attempt: Incomplete | None = ..., require_matching_inputs: Incomplete | None = ..., **kwargs): ...
    def start(self, action: Incomplete | None = ..., method: Incomplete | None = ..., **kwargs): ...
    def stop(self, **kwargs): ...
    def refer(self, action: Incomplete | None = ..., method: Incomplete | None = ..., **kwargs): ...

class Refer(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...
    def sip(self, sip_url, **kwargs): ...
    def refer_sip(self, sip_url, **kwargs): ...

class ReferSip(TwiML):
    name: str
    value: Incomplete
    def __init__(self, sip_url, **kwargs) -> None: ...

class Stop(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...
    def stream(self, name: Incomplete | None = ..., connector_name: Incomplete | None = ..., url: Incomplete | None = ..., track: Incomplete | None = ..., status_callback: Incomplete | None = ..., status_callback_method: Incomplete | None = ..., **kwargs): ...
    def siprec(self, name: Incomplete | None = ..., connector_name: Incomplete | None = ..., track: Incomplete | None = ..., **kwargs): ...

class Siprec(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...
    def parameter(self, name: Incomplete | None = ..., value: Incomplete | None = ..., **kwargs): ...

class Parameter(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...

class Stream(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...
    def parameter(self, name: Incomplete | None = ..., value: Incomplete | None = ..., **kwargs): ...

class Start(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...
    def stream(self, name: Incomplete | None = ..., connector_name: Incomplete | None = ..., url: Incomplete | None = ..., track: Incomplete | None = ..., status_callback: Incomplete | None = ..., status_callback_method: Incomplete | None = ..., **kwargs): ...
    def siprec(self, name: Incomplete | None = ..., connector_name: Incomplete | None = ..., track: Incomplete | None = ..., **kwargs): ...

class Prompt(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...
    def say(self, message: Incomplete | None = ..., voice: Incomplete | None = ..., loop: Incomplete | None = ..., language: Incomplete | None = ..., **kwargs): ...
    def play(self, url: Incomplete | None = ..., loop: Incomplete | None = ..., digits: Incomplete | None = ..., **kwargs): ...
    def pause(self, length: Incomplete | None = ..., **kwargs): ...

class Pause(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...

class Play(TwiML):
    name: str
    value: Incomplete
    def __init__(self, url: Incomplete | None = ..., **kwargs) -> None: ...

class Say(TwiML):
    name: str
    value: Incomplete
    def __init__(self, message: Incomplete | None = ..., **kwargs) -> None: ...
    def break_(self, strength: Incomplete | None = ..., time: Incomplete | None = ..., **kwargs): ...
    def ssml_break(self, strength: Incomplete | None = ..., time: Incomplete | None = ..., **kwargs): ...
    def emphasis(self, words: Incomplete | None = ..., level: Incomplete | None = ..., **kwargs): ...
    def ssml_emphasis(self, words: Incomplete | None = ..., level: Incomplete | None = ..., **kwargs): ...
    def lang(self, words: Incomplete | None = ..., xml_lang: Incomplete | None = ..., **kwargs): ...
    def ssml_lang(self, words: Incomplete | None = ..., xml_lang: Incomplete | None = ..., **kwargs): ...
    def p(self, words: Incomplete | None = ..., **kwargs): ...
    def ssml_p(self, words: Incomplete | None = ..., **kwargs): ...
    def phoneme(self, words, alphabet: Incomplete | None = ..., ph: Incomplete | None = ..., **kwargs): ...
    def ssml_phoneme(self, words, alphabet: Incomplete | None = ..., ph: Incomplete | None = ..., **kwargs): ...
    def prosody(self, words: Incomplete | None = ..., volume: Incomplete | None = ..., rate: Incomplete | None = ..., pitch: Incomplete | None = ..., **kwargs): ...
    def ssml_prosody(self, words: Incomplete | None = ..., volume: Incomplete | None = ..., rate: Incomplete | None = ..., pitch: Incomplete | None = ..., **kwargs): ...
    def s(self, words: Incomplete | None = ..., **kwargs): ...
    def ssml_s(self, words: Incomplete | None = ..., **kwargs): ...
    def say_as(self, words, interpret_as: Incomplete | None = ..., format: Incomplete | None = ..., **kwargs): ...
    def ssml_say_as(self, words, interpret_as: Incomplete | None = ..., format: Incomplete | None = ..., **kwargs): ...
    def sub(self, words, alias: Incomplete | None = ..., **kwargs): ...
    def ssml_sub(self, words, alias: Incomplete | None = ..., **kwargs): ...
    def w(self, words: Incomplete | None = ..., role: Incomplete | None = ..., **kwargs): ...
    def ssml_w(self, words: Incomplete | None = ..., role: Incomplete | None = ..., **kwargs): ...

class SsmlW(TwiML):
    name: str
    value: Incomplete
    def __init__(self, words: Incomplete | None = ..., **kwargs) -> None: ...
    def break_(self, strength: Incomplete | None = ..., time: Incomplete | None = ..., **kwargs): ...
    def ssml_break(self, strength: Incomplete | None = ..., time: Incomplete | None = ..., **kwargs): ...
    def emphasis(self, words: Incomplete | None = ..., level: Incomplete | None = ..., **kwargs): ...
    def ssml_emphasis(self, words: Incomplete | None = ..., level: Incomplete | None = ..., **kwargs): ...
    def phoneme(self, words, alphabet: Incomplete | None = ..., ph: Incomplete | None = ..., **kwargs): ...
    def ssml_phoneme(self, words, alphabet: Incomplete | None = ..., ph: Incomplete | None = ..., **kwargs): ...
    def prosody(self, words: Incomplete | None = ..., volume: Incomplete | None = ..., rate: Incomplete | None = ..., pitch: Incomplete | None = ..., **kwargs): ...
    def ssml_prosody(self, words: Incomplete | None = ..., volume: Incomplete | None = ..., rate: Incomplete | None = ..., pitch: Incomplete | None = ..., **kwargs): ...
    def say_as(self, words, interpret_as: Incomplete | None = ..., format: Incomplete | None = ..., **kwargs): ...
    def ssml_say_as(self, words, interpret_as: Incomplete | None = ..., format: Incomplete | None = ..., **kwargs): ...
    def sub(self, words, alias: Incomplete | None = ..., **kwargs): ...
    def ssml_sub(self, words, alias: Incomplete | None = ..., **kwargs): ...

class SsmlSub(TwiML):
    name: str
    value: Incomplete
    def __init__(self, words, **kwargs) -> None: ...

class SsmlSayAs(TwiML):
    name: str
    value: Incomplete
    def __init__(self, words, **kwargs) -> None: ...

class SsmlProsody(TwiML):
    name: str
    value: Incomplete
    def __init__(self, words: Incomplete | None = ..., **kwargs) -> None: ...
    def break_(self, strength: Incomplete | None = ..., time: Incomplete | None = ..., **kwargs): ...
    def ssml_break(self, strength: Incomplete | None = ..., time: Incomplete | None = ..., **kwargs): ...
    def emphasis(self, words: Incomplete | None = ..., level: Incomplete | None = ..., **kwargs): ...
    def ssml_emphasis(self, words: Incomplete | None = ..., level: Incomplete | None = ..., **kwargs): ...
    def lang(self, words: Incomplete | None = ..., xml_lang: Incomplete | None = ..., **kwargs): ...
    def ssml_lang(self, words: Incomplete | None = ..., xml_lang: Incomplete | None = ..., **kwargs): ...
    def p(self, words: Incomplete | None = ..., **kwargs): ...
    def ssml_p(self, words: Incomplete | None = ..., **kwargs): ...
    def phoneme(self, words, alphabet: Incomplete | None = ..., ph: Incomplete | None = ..., **kwargs): ...
    def ssml_phoneme(self, words, alphabet: Incomplete | None = ..., ph: Incomplete | None = ..., **kwargs): ...
    def prosody(self, words: Incomplete | None = ..., volume: Incomplete | None = ..., rate: Incomplete | None = ..., pitch: Incomplete | None = ..., **kwargs): ...
    def ssml_prosody(self, words: Incomplete | None = ..., volume: Incomplete | None = ..., rate: Incomplete | None = ..., pitch: Incomplete | None = ..., **kwargs): ...
    def s(self, words: Incomplete | None = ..., **kwargs): ...
    def ssml_s(self, words: Incomplete | None = ..., **kwargs): ...
    def say_as(self, words, interpret_as: Incomplete | None = ..., format: Incomplete | None = ..., **kwargs): ...
    def ssml_say_as(self, words, interpret_as: Incomplete | None = ..., format: Incomplete | None = ..., **kwargs): ...
    def sub(self, words, alias: Incomplete | None = ..., **kwargs): ...
    def ssml_sub(self, words, alias: Incomplete | None = ..., **kwargs): ...
    def w(self, words: Incomplete | None = ..., role: Incomplete | None = ..., **kwargs): ...
    def ssml_w(self, words: Incomplete | None = ..., role: Incomplete | None = ..., **kwargs): ...

class SsmlS(TwiML):
    name: str
    value: Incomplete
    def __init__(self, words: Incomplete | None = ..., **kwargs) -> None: ...
    def break_(self, strength: Incomplete | None = ..., time: Incomplete | None = ..., **kwargs): ...
    def ssml_break(self, strength: Incomplete | None = ..., time: Incomplete | None = ..., **kwargs): ...
    def emphasis(self, words: Incomplete | None = ..., level: Incomplete | None = ..., **kwargs): ...
    def ssml_emphasis(self, words: Incomplete | None = ..., level: Incomplete | None = ..., **kwargs): ...
    def lang(self, words: Incomplete | None = ..., xml_lang: Incomplete | None = ..., **kwargs): ...
    def ssml_lang(self, words: Incomplete | None = ..., xml_lang: Incomplete | None = ..., **kwargs): ...
    def phoneme(self, words, alphabet: Incomplete | None = ..., ph: Incomplete | None = ..., **kwargs): ...
    def ssml_phoneme(self, words, alphabet: Incomplete | None = ..., ph: Incomplete | None = ..., **kwargs): ...
    def prosody(self, words: Incomplete | None = ..., volume: Incomplete | None = ..., rate: Incomplete | None = ..., pitch: Incomplete | None = ..., **kwargs): ...
    def ssml_prosody(self, words: Incomplete | None = ..., volume: Incomplete | None = ..., rate: Incomplete | None = ..., pitch: Incomplete | None = ..., **kwargs): ...
    def say_as(self, words, interpret_as: Incomplete | None = ..., format: Incomplete | None = ..., **kwargs): ...
    def ssml_say_as(self, words, interpret_as: Incomplete | None = ..., format: Incomplete | None = ..., **kwargs): ...
    def sub(self, words, alias: Incomplete | None = ..., **kwargs): ...
    def ssml_sub(self, words, alias: Incomplete | None = ..., **kwargs): ...
    def w(self, words: Incomplete | None = ..., role: Incomplete | None = ..., **kwargs): ...
    def ssml_w(self, words: Incomplete | None = ..., role: Incomplete | None = ..., **kwargs): ...

class SsmlPhoneme(TwiML):
    name: str
    value: Incomplete
    def __init__(self, words, **kwargs) -> None: ...

class SsmlLang(TwiML):
    name: str
    value: Incomplete
    def __init__(self, words: Incomplete | None = ..., **kwargs) -> None: ...
    def break_(self, strength: Incomplete | None = ..., time: Incomplete | None = ..., **kwargs): ...
    def ssml_break(self, strength: Incomplete | None = ..., time: Incomplete | None = ..., **kwargs): ...
    def emphasis(self, words: Incomplete | None = ..., level: Incomplete | None = ..., **kwargs): ...
    def ssml_emphasis(self, words: Incomplete | None = ..., level: Incomplete | None = ..., **kwargs): ...
    def lang(self, words: Incomplete | None = ..., xml_lang: Incomplete | None = ..., **kwargs): ...
    def ssml_lang(self, words: Incomplete | None = ..., xml_lang: Incomplete | None = ..., **kwargs): ...
    def p(self, words: Incomplete | None = ..., **kwargs): ...
    def ssml_p(self, words: Incomplete | None = ..., **kwargs): ...
    def phoneme(self, words, alphabet: Incomplete | None = ..., ph: Incomplete | None = ..., **kwargs): ...
    def ssml_phoneme(self, words, alphabet: Incomplete | None = ..., ph: Incomplete | None = ..., **kwargs): ...
    def prosody(self, words: Incomplete | None = ..., volume: Incomplete | None = ..., rate: Incomplete | None = ..., pitch: Incomplete | None = ..., **kwargs): ...
    def ssml_prosody(self, words: Incomplete | None = ..., volume: Incomplete | None = ..., rate: Incomplete | None = ..., pitch: Incomplete | None = ..., **kwargs): ...
    def s(self, words: Incomplete | None = ..., **kwargs): ...
    def ssml_s(self, words: Incomplete | None = ..., **kwargs): ...
    def say_as(self, words, interpret_as: Incomplete | None = ..., format: Incomplete | None = ..., **kwargs): ...
    def ssml_say_as(self, words, interpret_as: Incomplete | None = ..., format: Incomplete | None = ..., **kwargs): ...
    def sub(self, words, alias: Incomplete | None = ..., **kwargs): ...
    def ssml_sub(self, words, alias: Incomplete | None = ..., **kwargs): ...
    def w(self, words: Incomplete | None = ..., role: Incomplete | None = ..., **kwargs): ...
    def ssml_w(self, words: Incomplete | None = ..., role: Incomplete | None = ..., **kwargs): ...

class SsmlP(TwiML):
    name: str
    value: Incomplete
    def __init__(self, words: Incomplete | None = ..., **kwargs) -> None: ...
    def break_(self, strength: Incomplete | None = ..., time: Incomplete | None = ..., **kwargs): ...
    def ssml_break(self, strength: Incomplete | None = ..., time: Incomplete | None = ..., **kwargs): ...
    def emphasis(self, words: Incomplete | None = ..., level: Incomplete | None = ..., **kwargs): ...
    def ssml_emphasis(self, words: Incomplete | None = ..., level: Incomplete | None = ..., **kwargs): ...
    def lang(self, words: Incomplete | None = ..., xml_lang: Incomplete | None = ..., **kwargs): ...
    def ssml_lang(self, words: Incomplete | None = ..., xml_lang: Incomplete | None = ..., **kwargs): ...
    def phoneme(self, words, alphabet: Incomplete | None = ..., ph: Incomplete | None = ..., **kwargs): ...
    def ssml_phoneme(self, words, alphabet: Incomplete | None = ..., ph: Incomplete | None = ..., **kwargs): ...
    def prosody(self, words: Incomplete | None = ..., volume: Incomplete | None = ..., rate: Incomplete | None = ..., pitch: Incomplete | None = ..., **kwargs): ...
    def ssml_prosody(self, words: Incomplete | None = ..., volume: Incomplete | None = ..., rate: Incomplete | None = ..., pitch: Incomplete | None = ..., **kwargs): ...
    def s(self, words: Incomplete | None = ..., **kwargs): ...
    def ssml_s(self, words: Incomplete | None = ..., **kwargs): ...
    def say_as(self, words, interpret_as: Incomplete | None = ..., format: Incomplete | None = ..., **kwargs): ...
    def ssml_say_as(self, words, interpret_as: Incomplete | None = ..., format: Incomplete | None = ..., **kwargs): ...
    def sub(self, words, alias: Incomplete | None = ..., **kwargs): ...
    def ssml_sub(self, words, alias: Incomplete | None = ..., **kwargs): ...
    def w(self, words: Incomplete | None = ..., role: Incomplete | None = ..., **kwargs): ...
    def ssml_w(self, words: Incomplete | None = ..., role: Incomplete | None = ..., **kwargs): ...

class SsmlEmphasis(TwiML):
    name: str
    value: Incomplete
    def __init__(self, words: Incomplete | None = ..., **kwargs) -> None: ...
    def break_(self, strength: Incomplete | None = ..., time: Incomplete | None = ..., **kwargs): ...
    def ssml_break(self, strength: Incomplete | None = ..., time: Incomplete | None = ..., **kwargs): ...
    def emphasis(self, words: Incomplete | None = ..., level: Incomplete | None = ..., **kwargs): ...
    def ssml_emphasis(self, words: Incomplete | None = ..., level: Incomplete | None = ..., **kwargs): ...
    def lang(self, words: Incomplete | None = ..., xml_lang: Incomplete | None = ..., **kwargs): ...
    def ssml_lang(self, words: Incomplete | None = ..., xml_lang: Incomplete | None = ..., **kwargs): ...
    def phoneme(self, words, alphabet: Incomplete | None = ..., ph: Incomplete | None = ..., **kwargs): ...
    def ssml_phoneme(self, words, alphabet: Incomplete | None = ..., ph: Incomplete | None = ..., **kwargs): ...
    def prosody(self, words: Incomplete | None = ..., volume: Incomplete | None = ..., rate: Incomplete | None = ..., pitch: Incomplete | None = ..., **kwargs): ...
    def ssml_prosody(self, words: Incomplete | None = ..., volume: Incomplete | None = ..., rate: Incomplete | None = ..., pitch: Incomplete | None = ..., **kwargs): ...
    def say_as(self, words, interpret_as: Incomplete | None = ..., format: Incomplete | None = ..., **kwargs): ...
    def ssml_say_as(self, words, interpret_as: Incomplete | None = ..., format: Incomplete | None = ..., **kwargs): ...
    def sub(self, words, alias: Incomplete | None = ..., **kwargs): ...
    def ssml_sub(self, words, alias: Incomplete | None = ..., **kwargs): ...
    def w(self, words: Incomplete | None = ..., role: Incomplete | None = ..., **kwargs): ...
    def ssml_w(self, words: Incomplete | None = ..., role: Incomplete | None = ..., **kwargs): ...

class SsmlBreak(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...

class Pay(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...
    def prompt(self, for_: Incomplete | None = ..., error_type: Incomplete | None = ..., card_type: Incomplete | None = ..., attempt: Incomplete | None = ..., require_matching_inputs: Incomplete | None = ..., **kwargs): ...
    def parameter(self, name: Incomplete | None = ..., value: Incomplete | None = ..., **kwargs): ...

class Sms(TwiML):
    name: str
    value: Incomplete
    def __init__(self, message, **kwargs) -> None: ...

class Reject(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...
    def parameter(self, name: Incomplete | None = ..., value: Incomplete | None = ..., **kwargs): ...

class Redirect(TwiML):
    name: str
    value: Incomplete
    def __init__(self, url, **kwargs) -> None: ...

class Record(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...

class Queue(TwiML):
    name: str
    value: Incomplete
    def __init__(self, name, **kwargs) -> None: ...

class Leave(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...

class Hangup(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...
    def parameter(self, name: Incomplete | None = ..., value: Incomplete | None = ..., **kwargs): ...

class Gather(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...
    def say(self, message: Incomplete | None = ..., voice: Incomplete | None = ..., loop: Incomplete | None = ..., language: Incomplete | None = ..., **kwargs): ...
    def pause(self, length: Incomplete | None = ..., **kwargs): ...
    def play(self, url: Incomplete | None = ..., loop: Incomplete | None = ..., digits: Incomplete | None = ..., **kwargs): ...

class Enqueue(TwiML):
    name: str
    value: Incomplete
    def __init__(self, name: Incomplete | None = ..., **kwargs) -> None: ...
    def task(self, body, priority: Incomplete | None = ..., timeout: Incomplete | None = ..., **kwargs): ...

class Task(TwiML):
    name: str
    value: Incomplete
    def __init__(self, body, **kwargs) -> None: ...

class Echo(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...

class Dial(TwiML):
    name: str
    value: Incomplete
    def __init__(self, number: Incomplete | None = ..., **kwargs) -> None: ...
    def client(self, identity: Incomplete | None = ..., url: Incomplete | None = ..., method: Incomplete | None = ..., status_callback_event: Incomplete | None = ..., status_callback: Incomplete | None = ..., status_callback_method: Incomplete | None = ..., **kwargs): ...
    def conference(self, name, muted: Incomplete | None = ..., beep: Incomplete | None = ..., start_conference_on_enter: Incomplete | None = ..., end_conference_on_exit: Incomplete | None = ..., wait_url: Incomplete | None = ..., wait_method: Incomplete | None = ..., max_participants: Incomplete | None = ..., record: Incomplete | None = ..., region: Incomplete | None = ..., coach: Incomplete | None = ..., trim: Incomplete | None = ..., status_callback_event: Incomplete | None = ..., status_callback: Incomplete | None = ..., status_callback_method: Incomplete | None = ..., recording_status_callback: Incomplete | None = ..., recording_status_callback_method: Incomplete | None = ..., recording_status_callback_event: Incomplete | None = ..., event_callback_url: Incomplete | None = ..., jitter_buffer_size: Incomplete | None = ..., participant_label: Incomplete | None = ..., **kwargs): ...
    def number(self, phone_number, send_digits: Incomplete | None = ..., url: Incomplete | None = ..., method: Incomplete | None = ..., status_callback_event: Incomplete | None = ..., status_callback: Incomplete | None = ..., status_callback_method: Incomplete | None = ..., byoc: Incomplete | None = ..., machine_detection: Incomplete | None = ..., amd_status_callback_method: Incomplete | None = ..., amd_status_callback: Incomplete | None = ..., machine_detection_timeout: Incomplete | None = ..., machine_detection_speech_threshold: Incomplete | None = ..., machine_detection_speech_end_threshold: Incomplete | None = ..., machine_detection_silence_timeout: Incomplete | None = ..., **kwargs): ...
    def queue(self, name, url: Incomplete | None = ..., method: Incomplete | None = ..., reservation_sid: Incomplete | None = ..., post_work_activity_sid: Incomplete | None = ..., **kwargs): ...
    def sim(self, sim_sid, **kwargs): ...
    def sip(self, sip_url, username: Incomplete | None = ..., password: Incomplete | None = ..., url: Incomplete | None = ..., method: Incomplete | None = ..., status_callback_event: Incomplete | None = ..., status_callback: Incomplete | None = ..., status_callback_method: Incomplete | None = ..., machine_detection: Incomplete | None = ..., amd_status_callback_method: Incomplete | None = ..., amd_status_callback: Incomplete | None = ..., machine_detection_timeout: Incomplete | None = ..., machine_detection_speech_threshold: Incomplete | None = ..., machine_detection_speech_end_threshold: Incomplete | None = ..., machine_detection_silence_timeout: Incomplete | None = ..., **kwargs): ...
    def application(self, application_sid: Incomplete | None = ..., url: Incomplete | None = ..., method: Incomplete | None = ..., status_callback_event: Incomplete | None = ..., status_callback: Incomplete | None = ..., status_callback_method: Incomplete | None = ..., customer_id: Incomplete | None = ..., copy_parent_to: Incomplete | None = ..., **kwargs): ...

class Application(TwiML):
    name: str
    value: Incomplete
    def __init__(self, application_sid: Incomplete | None = ..., **kwargs) -> None: ...
    def application_sid(self, sid, **kwargs): ...
    def parameter(self, name: Incomplete | None = ..., value: Incomplete | None = ..., **kwargs): ...

class ApplicationSid(TwiML):
    name: str
    value: Incomplete
    def __init__(self, sid, **kwargs) -> None: ...

class Sip(TwiML):
    name: str
    value: Incomplete
    def __init__(self, sip_url, **kwargs) -> None: ...

class Sim(TwiML):
    name: str
    value: Incomplete
    def __init__(self, sim_sid, **kwargs) -> None: ...

class Number(TwiML):
    name: str
    value: Incomplete
    def __init__(self, phone_number, **kwargs) -> None: ...

class Conference(TwiML):
    name: str
    value: Incomplete
    def __init__(self, name, **kwargs) -> None: ...

class Client(TwiML):
    name: str
    value: Incomplete
    def __init__(self, identity: Incomplete | None = ..., **kwargs) -> None: ...
    def identity(self, client_identity, **kwargs): ...
    def parameter(self, name: Incomplete | None = ..., value: Incomplete | None = ..., **kwargs): ...

class Identity(TwiML):
    name: str
    value: Incomplete
    def __init__(self, client_identity, **kwargs) -> None: ...

class Connect(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...
    def room(self, name, participant_identity: Incomplete | None = ..., **kwargs): ...
    def autopilot(self, name, **kwargs): ...
    def stream(self, name: Incomplete | None = ..., connector_name: Incomplete | None = ..., url: Incomplete | None = ..., track: Incomplete | None = ..., status_callback: Incomplete | None = ..., status_callback_method: Incomplete | None = ..., **kwargs): ...
    def virtual_agent(self, connector_name: Incomplete | None = ..., language: Incomplete | None = ..., sentiment_analysis: Incomplete | None = ..., status_callback: Incomplete | None = ..., status_callback_method: Incomplete | None = ..., **kwargs): ...
    def conversation(self, service_instance_sid: Incomplete | None = ..., inbound_autocreation: Incomplete | None = ..., routing_assignment_timeout: Incomplete | None = ..., inbound_timeout: Incomplete | None = ..., url: Incomplete | None = ..., method: Incomplete | None = ..., record: Incomplete | None = ..., trim: Incomplete | None = ..., recording_status_callback: Incomplete | None = ..., recording_status_callback_method: Incomplete | None = ..., recording_status_callback_event: Incomplete | None = ..., status_callback: Incomplete | None = ..., status_callback_method: Incomplete | None = ..., status_callback_event: Incomplete | None = ..., **kwargs): ...

class Conversation(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...

class VirtualAgent(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...
    def config(self, name: Incomplete | None = ..., value: Incomplete | None = ..., **kwargs): ...
    def parameter(self, name: Incomplete | None = ..., value: Incomplete | None = ..., **kwargs): ...

class Config(TwiML):
    name: str
    def __init__(self, **kwargs) -> None: ...

class Autopilot(TwiML):
    name: str
    value: Incomplete
    def __init__(self, name, **kwargs) -> None: ...

class Room(TwiML):
    name: str
    value: Incomplete
    def __init__(self, name, **kwargs) -> None: ...
