from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page

class BrandVettingList(ListResource):
    def __init__(self, version, brand_sid) -> None: ...
    def create(self, vetting_provider, vetting_id=...): ...
    def stream(self, vetting_provider=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, vetting_provider=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, vetting_provider=..., page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def get(self, brand_vetting_sid): ...
    def __call__(self, brand_vetting_sid): ...

class BrandVettingPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class BrandVettingContext(InstanceContext):
    def __init__(self, version, brand_sid, brand_vetting_sid) -> None: ...
    def fetch(self): ...

class BrandVettingInstance(InstanceResource):
    class VettingProvider:
        CAMPAIGN_VERIFY: str
    def __init__(self, version, payload, brand_sid, brand_vetting_sid: Incomplete | None = ...) -> None: ...
    @property
    def account_sid(self): ...
    @property
    def brand_sid(self): ...
    @property
    def brand_vetting_sid(self): ...
    @property
    def date_updated(self): ...
    @property
    def date_created(self): ...
    @property
    def vetting_id(self): ...
    @property
    def vetting_class(self): ...
    @property
    def vetting_status(self): ...
    @property
    def vetting_provider(self): ...
    @property
    def url(self): ...
    def fetch(self): ...
