from _typeshed import Incomplete
from twilio.base import values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page

class PhoneNumberList(ListResource):
    def __init__(self, version) -> None: ...
    def get(self, phone_number): ...
    def __call__(self, phone_number): ...

class PhoneNumberPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class PhoneNumberContext(InstanceContext):
    def __init__(self, version, phone_number) -> None: ...
    def fetch(self, fields=..., country_code=..., first_name=..., last_name=..., address_line_1=..., address_line_2=..., city=..., state=..., postal_code=..., address_country_code=..., national_id=..., date_of_birth=...): ...

class PhoneNumberInstance(InstanceResource):
    class Type:
        LANDLINE: str
        MOBILE: str
        VOIP: str
    class ValidationError:
        TOO_SHORT: str
        TOO_LONG: str
        INVALID_BUT_POSSIBLE: str
        INVALID_COUNTRY_CODE: str
        INVALID_LENGTH: str
        NOT_A_NUMBER: str
    def __init__(self, version, payload, phone_number: Incomplete | None = ...) -> None: ...
    @property
    def calling_country_code(self): ...
    @property
    def country_code(self): ...
    @property
    def phone_number(self): ...
    @property
    def national_format(self): ...
    @property
    def valid(self): ...
    @property
    def validation_errors(self): ...
    @property
    def caller_name(self): ...
    @property
    def sim_swap(self): ...
    @property
    def call_forwarding(self): ...
    @property
    def live_activity(self): ...
    @property
    def line_type_intelligence(self): ...
    @property
    def identity_match(self): ...
    @property
    def sms_pumping_risk(self): ...
    @property
    def disposable_phone_number_risk(self): ...
    @property
    def url(self): ...
    def fetch(self, fields=..., country_code=..., first_name=..., last_name=..., address_line_1=..., address_line_2=..., city=..., state=..., postal_code=..., address_country_code=..., national_id=..., date_of_birth=...): ...
