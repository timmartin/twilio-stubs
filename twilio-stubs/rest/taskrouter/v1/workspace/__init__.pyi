from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from twilio.rest.taskrouter.v1.workspace.activity import ActivityList as ActivityList
from twilio.rest.taskrouter.v1.workspace.event import EventList as EventList
from twilio.rest.taskrouter.v1.workspace.task import TaskList as TaskList
from twilio.rest.taskrouter.v1.workspace.task_channel import TaskChannelList as TaskChannelList
from twilio.rest.taskrouter.v1.workspace.task_queue import TaskQueueList as TaskQueueList
from twilio.rest.taskrouter.v1.workspace.task_queue_bulk_real_time_statistics import TaskQueueBulkRealTimeStatisticsList as TaskQueueBulkRealTimeStatisticsList
from twilio.rest.taskrouter.v1.workspace.worker import WorkerList as WorkerList
from twilio.rest.taskrouter.v1.workspace.workflow import WorkflowList as WorkflowList
from twilio.rest.taskrouter.v1.workspace.workspace_cumulative_statistics import WorkspaceCumulativeStatisticsList as WorkspaceCumulativeStatisticsList
from twilio.rest.taskrouter.v1.workspace.workspace_real_time_statistics import WorkspaceRealTimeStatisticsList as WorkspaceRealTimeStatisticsList
from twilio.rest.taskrouter.v1.workspace.workspace_statistics import WorkspaceStatisticsList as WorkspaceStatisticsList

class WorkspaceList(ListResource):
    def __init__(self, version) -> None: ...
    def stream(self, friendly_name=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, friendly_name=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, friendly_name=..., page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def create(self, friendly_name, event_callback_url=..., events_filter=..., multi_task_enabled=..., template=..., prioritize_queue_order=...): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class WorkspacePage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class WorkspaceContext(InstanceContext):
    def __init__(self, version, sid) -> None: ...
    def fetch(self): ...
    def update(self, default_activity_sid=..., event_callback_url=..., events_filter=..., friendly_name=..., multi_task_enabled=..., timeout_activity_sid=..., prioritize_queue_order=...): ...
    def delete(self): ...
    @property
    def activities(self): ...
    @property
    def events(self): ...
    @property
    def tasks(self): ...
    @property
    def task_queues(self): ...
    @property
    def workers(self): ...
    @property
    def workflows(self): ...
    @property
    def statistics(self): ...
    @property
    def real_time_statistics(self): ...
    @property
    def cumulative_statistics(self): ...
    @property
    def task_channels(self): ...
    @property
    def bulk_real_time_statistics(self): ...

class WorkspaceInstance(InstanceResource):
    class QueueOrder:
        FIFO: str
        LIFO: str
    def __init__(self, version, payload, sid: Incomplete | None = ...) -> None: ...
    @property
    def account_sid(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def default_activity_name(self): ...
    @property
    def default_activity_sid(self): ...
    @property
    def event_callback_url(self): ...
    @property
    def events_filter(self): ...
    @property
    def friendly_name(self): ...
    @property
    def multi_task_enabled(self): ...
    @property
    def sid(self): ...
    @property
    def timeout_activity_name(self): ...
    @property
    def timeout_activity_sid(self): ...
    @property
    def prioritize_queue_order(self): ...
    @property
    def url(self): ...
    @property
    def links(self): ...
    def fetch(self): ...
    def update(self, default_activity_sid=..., event_callback_url=..., events_filter=..., friendly_name=..., multi_task_enabled=..., timeout_activity_sid=..., prioritize_queue_order=...): ...
    def delete(self): ...
    @property
    def activities(self): ...
    @property
    def events(self): ...
    @property
    def tasks(self): ...
    @property
    def task_queues(self): ...
    @property
    def workers(self): ...
    @property
    def workflows(self): ...
    @property
    def statistics(self): ...
    @property
    def real_time_statistics(self): ...
    @property
    def cumulative_statistics(self): ...
    @property
    def task_channels(self): ...
    @property
    def bulk_real_time_statistics(self): ...
