from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from twilio.rest.taskrouter.v1.workspace.task_queue.task_queue_cumulative_statistics import TaskQueueCumulativeStatisticsList as TaskQueueCumulativeStatisticsList
from twilio.rest.taskrouter.v1.workspace.task_queue.task_queue_real_time_statistics import TaskQueueRealTimeStatisticsList as TaskQueueRealTimeStatisticsList
from twilio.rest.taskrouter.v1.workspace.task_queue.task_queue_statistics import TaskQueueStatisticsList as TaskQueueStatisticsList
from twilio.rest.taskrouter.v1.workspace.task_queue.task_queues_statistics import TaskQueuesStatisticsList as TaskQueuesStatisticsList

class TaskQueueList(ListResource):
    def __init__(self, version, workspace_sid) -> None: ...
    def stream(self, friendly_name=..., evaluate_worker_attributes=..., worker_sid=..., ordering=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, friendly_name=..., evaluate_worker_attributes=..., worker_sid=..., ordering=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, friendly_name=..., evaluate_worker_attributes=..., worker_sid=..., ordering=..., page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def create(self, friendly_name, target_workers=..., max_reserved_workers=..., task_order=..., reservation_activity_sid=..., assignment_activity_sid=...): ...
    @property
    def statistics(self): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class TaskQueuePage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class TaskQueueContext(InstanceContext):
    def __init__(self, version, workspace_sid, sid) -> None: ...
    def fetch(self): ...
    def update(self, friendly_name=..., target_workers=..., reservation_activity_sid=..., assignment_activity_sid=..., max_reserved_workers=..., task_order=...): ...
    def delete(self): ...
    @property
    def statistics(self): ...
    @property
    def real_time_statistics(self): ...
    @property
    def cumulative_statistics(self): ...

class TaskQueueInstance(InstanceResource):
    class TaskOrder:
        FIFO: str
        LIFO: str
    def __init__(self, version, payload, workspace_sid, sid: Incomplete | None = ...) -> None: ...
    @property
    def account_sid(self): ...
    @property
    def assignment_activity_sid(self): ...
    @property
    def assignment_activity_name(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def friendly_name(self): ...
    @property
    def max_reserved_workers(self): ...
    @property
    def reservation_activity_sid(self): ...
    @property
    def reservation_activity_name(self): ...
    @property
    def sid(self): ...
    @property
    def target_workers(self): ...
    @property
    def task_order(self): ...
    @property
    def url(self): ...
    @property
    def workspace_sid(self): ...
    @property
    def links(self): ...
    def fetch(self): ...
    def update(self, friendly_name=..., target_workers=..., reservation_activity_sid=..., assignment_activity_sid=..., max_reserved_workers=..., task_order=...): ...
    def delete(self): ...
    @property
    def statistics(self): ...
    @property
    def real_time_statistics(self): ...
    @property
    def cumulative_statistics(self): ...
