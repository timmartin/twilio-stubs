from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from twilio.rest.taskrouter.v1.workspace.worker.reservation import ReservationList as ReservationList
from twilio.rest.taskrouter.v1.workspace.worker.worker_channel import WorkerChannelList as WorkerChannelList
from twilio.rest.taskrouter.v1.workspace.worker.worker_statistics import WorkerStatisticsList as WorkerStatisticsList
from twilio.rest.taskrouter.v1.workspace.worker.workers_cumulative_statistics import WorkersCumulativeStatisticsList as WorkersCumulativeStatisticsList
from twilio.rest.taskrouter.v1.workspace.worker.workers_real_time_statistics import WorkersRealTimeStatisticsList as WorkersRealTimeStatisticsList
from twilio.rest.taskrouter.v1.workspace.worker.workers_statistics import WorkersStatisticsList as WorkersStatisticsList

class WorkerList(ListResource):
    def __init__(self, version, workspace_sid) -> None: ...
    def stream(self, activity_name=..., activity_sid=..., available=..., friendly_name=..., target_workers_expression=..., task_queue_name=..., task_queue_sid=..., ordering=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, activity_name=..., activity_sid=..., available=..., friendly_name=..., target_workers_expression=..., task_queue_name=..., task_queue_sid=..., ordering=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, activity_name=..., activity_sid=..., available=..., friendly_name=..., target_workers_expression=..., task_queue_name=..., task_queue_sid=..., ordering=..., page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def create(self, friendly_name, activity_sid=..., attributes=...): ...
    @property
    def statistics(self): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class WorkerPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class WorkerContext(InstanceContext):
    def __init__(self, version, workspace_sid, sid) -> None: ...
    def fetch(self): ...
    def update(self, activity_sid=..., attributes=..., friendly_name=..., reject_pending_reservations=..., if_match=...): ...
    def delete(self, if_match=...): ...
    @property
    def real_time_statistics(self): ...
    @property
    def cumulative_statistics(self): ...
    @property
    def statistics(self): ...
    @property
    def reservations(self): ...
    @property
    def worker_channels(self): ...

class WorkerInstance(InstanceResource):
    def __init__(self, version, payload, workspace_sid, sid: Incomplete | None = ...) -> None: ...
    @property
    def account_sid(self): ...
    @property
    def activity_name(self): ...
    @property
    def activity_sid(self): ...
    @property
    def attributes(self): ...
    @property
    def available(self): ...
    @property
    def date_created(self): ...
    @property
    def date_status_changed(self): ...
    @property
    def date_updated(self): ...
    @property
    def friendly_name(self): ...
    @property
    def sid(self): ...
    @property
    def workspace_sid(self): ...
    @property
    def url(self): ...
    @property
    def links(self): ...
    def fetch(self): ...
    def update(self, activity_sid=..., attributes=..., friendly_name=..., reject_pending_reservations=..., if_match=...): ...
    def delete(self, if_match=...): ...
    @property
    def real_time_statistics(self): ...
    @property
    def cumulative_statistics(self): ...
    @property
    def statistics(self): ...
    @property
    def reservations(self): ...
    @property
    def worker_channels(self): ...
