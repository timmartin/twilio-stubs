from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page

class FleetList(ListResource):
    def __init__(self, version) -> None: ...
    def create(self, network_access_profile, unique_name=..., data_enabled=..., data_limit=..., ip_commands_url=..., ip_commands_method=..., sms_commands_enabled=..., sms_commands_url=..., sms_commands_method=...): ...
    def stream(self, network_access_profile=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, network_access_profile=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, network_access_profile=..., page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class FleetPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class FleetContext(InstanceContext):
    def __init__(self, version, sid) -> None: ...
    def fetch(self): ...
    def update(self, unique_name=..., network_access_profile=..., ip_commands_url=..., ip_commands_method=..., sms_commands_url=..., sms_commands_method=..., data_limit=...): ...

class FleetInstance(InstanceResource):
    class DataMetering:
        PAYG: str
    def __init__(self, version, payload, sid: Incomplete | None = ...) -> None: ...
    @property
    def account_sid(self): ...
    @property
    def sid(self): ...
    @property
    def unique_name(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def url(self): ...
    @property
    def data_enabled(self): ...
    @property
    def data_limit(self): ...
    @property
    def data_metering(self): ...
    @property
    def sms_commands_enabled(self): ...
    @property
    def sms_commands_url(self): ...
    @property
    def sms_commands_method(self): ...
    @property
    def network_access_profile_sid(self): ...
    @property
    def ip_commands_url(self): ...
    @property
    def ip_commands_method(self): ...
    def fetch(self): ...
    def update(self, unique_name=..., network_access_profile=..., ip_commands_url=..., ip_commands_method=..., sms_commands_url=..., sms_commands_method=..., data_limit=...): ...
