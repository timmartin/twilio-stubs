from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, serialize as serialize, values as values
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page

class UsageRecordList(ListResource):
    def __init__(self, version) -> None: ...
    def stream(self, sim=..., fleet=..., network=..., iso_country=..., group=..., granularity=..., start_time=..., end_time=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, sim=..., fleet=..., network=..., iso_country=..., group=..., granularity=..., start_time=..., end_time=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, sim=..., fleet=..., network=..., iso_country=..., group=..., granularity=..., start_time=..., end_time=..., page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...

class UsageRecordPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class UsageRecordInstance(InstanceResource):
    class Granularity:
        HOUR: str
        DAY: str
        ALL: str
    class Group:
        SIM: str
        FLEET: str
        NETWORK: str
        ISOCOUNTRY: str
    class SortBy:
        TIME: str
    def __init__(self, version, payload) -> None: ...
    @property
    def account_sid(self): ...
    @property
    def sim_sid(self): ...
    @property
    def network_sid(self): ...
    @property
    def fleet_sid(self): ...
    @property
    def iso_country(self): ...
    @property
    def period(self): ...
    @property
    def data_upload(self): ...
    @property
    def data_download(self): ...
    @property
    def data_total(self): ...
    @property
    def data_total_billed(self): ...
    @property
    def billed_unit(self): ...
