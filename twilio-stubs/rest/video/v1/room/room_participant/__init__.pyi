from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, serialize as serialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from twilio.rest.video.v1.room.room_participant.room_participant_anonymize import AnonymizeList as AnonymizeList
from twilio.rest.video.v1.room.room_participant.room_participant_published_track import PublishedTrackList as PublishedTrackList
from twilio.rest.video.v1.room.room_participant.room_participant_subscribe_rule import SubscribeRulesList as SubscribeRulesList
from twilio.rest.video.v1.room.room_participant.room_participant_subscribed_track import SubscribedTrackList as SubscribedTrackList

class ParticipantList(ListResource):
    def __init__(self, version, room_sid) -> None: ...
    def stream(self, status=..., identity=..., date_created_after=..., date_created_before=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, status=..., identity=..., date_created_after=..., date_created_before=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, status=..., identity=..., date_created_after=..., date_created_before=..., page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class ParticipantPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class ParticipantContext(InstanceContext):
    def __init__(self, version, room_sid, sid) -> None: ...
    def fetch(self): ...
    def update(self, status=...): ...
    @property
    def published_tracks(self): ...
    @property
    def subscribed_tracks(self): ...
    @property
    def subscribe_rules(self): ...
    @property
    def anonymize(self): ...

class ParticipantInstance(InstanceResource):
    class Status:
        CONNECTED: str
        DISCONNECTED: str
    def __init__(self, version, payload, room_sid, sid: Incomplete | None = ...) -> None: ...
    @property
    def sid(self): ...
    @property
    def room_sid(self): ...
    @property
    def account_sid(self): ...
    @property
    def status(self): ...
    @property
    def identity(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def start_time(self): ...
    @property
    def end_time(self): ...
    @property
    def duration(self): ...
    @property
    def url(self): ...
    @property
    def links(self): ...
    def fetch(self): ...
    def update(self, status=...): ...
    @property
    def published_tracks(self): ...
    @property
    def subscribed_tracks(self): ...
    @property
    def subscribe_rules(self): ...
    @property
    def anonymize(self): ...
