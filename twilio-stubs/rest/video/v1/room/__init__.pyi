from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, serialize as serialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from twilio.rest.video.v1.room.recording import RoomRecordingList as RoomRecordingList
from twilio.rest.video.v1.room.room_participant import ParticipantList as ParticipantList
from twilio.rest.video.v1.room.room_recording_rule import RecordingRulesList as RecordingRulesList

class RoomList(ListResource):
    def __init__(self, version) -> None: ...
    def create(self, enable_turn=..., type=..., unique_name=..., status_callback=..., status_callback_method=..., max_participants=..., record_participants_on_connect=..., video_codecs=..., media_region=..., recording_rules=..., audio_only=..., max_participant_duration=..., empty_room_timeout=..., unused_room_timeout=..., large_room=...): ...
    def stream(self, status=..., unique_name=..., date_created_after=..., date_created_before=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, status=..., unique_name=..., date_created_after=..., date_created_before=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, status=..., unique_name=..., date_created_after=..., date_created_before=..., page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class RoomPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class RoomContext(InstanceContext):
    def __init__(self, version, sid) -> None: ...
    def fetch(self): ...
    def update(self, status): ...
    @property
    def recordings(self): ...
    @property
    def participants(self): ...
    @property
    def recording_rules(self): ...

class RoomInstance(InstanceResource):
    class RoomStatus:
        IN_PROGRESS: str
        COMPLETED: str
        FAILED: str
    class RoomType:
        GO: str
        PEER_TO_PEER: str
        GROUP: str
        GROUP_SMALL: str
    class VideoCodec:
        VP8: str
        H264: str
    def __init__(self, version, payload, sid: Incomplete | None = ...) -> None: ...
    @property
    def sid(self): ...
    @property
    def status(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def account_sid(self): ...
    @property
    def enable_turn(self): ...
    @property
    def unique_name(self): ...
    @property
    def status_callback(self): ...
    @property
    def status_callback_method(self): ...
    @property
    def end_time(self): ...
    @property
    def duration(self): ...
    @property
    def type(self): ...
    @property
    def max_participants(self): ...
    @property
    def max_participant_duration(self): ...
    @property
    def max_concurrent_published_tracks(self): ...
    @property
    def record_participants_on_connect(self): ...
    @property
    def video_codecs(self): ...
    @property
    def media_region(self): ...
    @property
    def audio_only(self): ...
    @property
    def empty_room_timeout(self): ...
    @property
    def unused_room_timeout(self): ...
    @property
    def large_room(self): ...
    @property
    def url(self): ...
    @property
    def links(self): ...
    def fetch(self): ...
    def update(self, status): ...
    @property
    def recordings(self): ...
    @property
    def participants(self): ...
    @property
    def recording_rules(self): ...
