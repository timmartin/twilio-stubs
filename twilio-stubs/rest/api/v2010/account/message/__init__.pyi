from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, serialize as serialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from twilio.rest.api.v2010.account.message.feedback import FeedbackList as FeedbackList
from twilio.rest.api.v2010.account.message.media import MediaList as MediaList

class MessageList(ListResource):
    def __init__(self, version, account_sid) -> None: ...
    def create(self, to, status_callback=..., application_sid=..., max_price=..., provide_feedback=..., attempt=..., validity_period=..., force_delivery=..., content_retention=..., address_retention=..., smart_encoded=..., persistent_action=..., shorten_urls=..., schedule_type=..., send_at=..., send_as_mms=..., content_sid=..., content_variables=..., from_=..., messaging_service_sid=..., body=..., media_url=...): ...
    def stream(self, to=..., from_=..., date_sent_before=..., date_sent=..., date_sent_after=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, to=..., from_=..., date_sent_before=..., date_sent=..., date_sent_after=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, to=..., from_=..., date_sent_before=..., date_sent=..., date_sent_after=..., page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class MessagePage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class MessageContext(InstanceContext):
    def __init__(self, version, account_sid, sid) -> None: ...
    def delete(self): ...
    def fetch(self): ...
    def update(self, body=..., status=...): ...
    @property
    def media(self): ...
    @property
    def feedback(self): ...

class MessageInstance(InstanceResource):
    class Status:
        QUEUED: str
        SENDING: str
        SENT: str
        FAILED: str
        DELIVERED: str
        UNDELIVERED: str
        RECEIVING: str
        RECEIVED: str
        ACCEPTED: str
        SCHEDULED: str
        READ: str
        PARTIALLY_DELIVERED: str
        CANCELED: str
    class UpdateStatus:
        CANCELED: str
    class Direction:
        INBOUND: str
        OUTBOUND_API: str
        OUTBOUND_CALL: str
        OUTBOUND_REPLY: str
    class ContentRetention:
        RETAIN: str
    class AddressRetention:
        RETAIN: str
    class TrafficType:
        FREE: str
    class ScheduleType:
        FIXED: str
    def __init__(self, version, payload, account_sid, sid: Incomplete | None = ...) -> None: ...
    @property
    def body(self): ...
    @property
    def num_segments(self): ...
    @property
    def direction(self): ...
    @property
    def from_(self): ...
    @property
    def to(self): ...
    @property
    def date_updated(self): ...
    @property
    def price(self): ...
    @property
    def error_message(self): ...
    @property
    def uri(self): ...
    @property
    def account_sid(self): ...
    @property
    def num_media(self): ...
    @property
    def status(self): ...
    @property
    def messaging_service_sid(self): ...
    @property
    def sid(self): ...
    @property
    def date_sent(self): ...
    @property
    def date_created(self): ...
    @property
    def error_code(self): ...
    @property
    def price_unit(self): ...
    @property
    def api_version(self): ...
    @property
    def subresource_uris(self): ...
    def delete(self): ...
    def fetch(self): ...
    def update(self, body=..., status=...): ...
    @property
    def media(self): ...
    @property
    def feedback(self): ...
