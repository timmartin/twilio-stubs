from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from twilio.rest.api.v2010.account.sip.ip_access_control_list.ip_address import IpAddressList as IpAddressList

class IpAccessControlListList(ListResource):
    def __init__(self, version, account_sid) -> None: ...
    def stream(self, limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def create(self, friendly_name): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class IpAccessControlListPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class IpAccessControlListContext(InstanceContext):
    def __init__(self, version, account_sid, sid) -> None: ...
    def fetch(self): ...
    def update(self, friendly_name): ...
    def delete(self): ...
    @property
    def ip_addresses(self): ...

class IpAccessControlListInstance(InstanceResource):
    def __init__(self, version, payload, account_sid, sid: Incomplete | None = ...) -> None: ...
    @property
    def sid(self): ...
    @property
    def account_sid(self): ...
    @property
    def friendly_name(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def subresource_uris(self): ...
    @property
    def uri(self): ...
    def fetch(self): ...
    def update(self, friendly_name): ...
    def delete(self): ...
    @property
    def ip_addresses(self): ...
