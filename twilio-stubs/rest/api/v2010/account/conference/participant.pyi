from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, serialize as serialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page

class ParticipantList(ListResource):
    def __init__(self, version, account_sid, conference_sid) -> None: ...
    def create(self, from_, to, status_callback=..., status_callback_method=..., status_callback_event=..., label=..., timeout=..., record=..., muted=..., beep=..., start_conference_on_enter=..., end_conference_on_exit=..., wait_url=..., wait_method=..., early_media=..., max_participants=..., conference_record=..., conference_trim=..., conference_status_callback=..., conference_status_callback_method=..., conference_status_callback_event=..., recording_channels=..., recording_status_callback=..., recording_status_callback_method=..., sip_auth_username=..., sip_auth_password=..., region=..., conference_recording_status_callback=..., conference_recording_status_callback_method=..., recording_status_callback_event=..., conference_recording_status_callback_event=..., coaching=..., call_sid_to_coach=..., jitter_buffer_size=..., byoc=..., caller_id=..., call_reason=..., recording_track=..., time_limit=..., machine_detection=..., machine_detection_timeout=..., machine_detection_speech_threshold=..., machine_detection_speech_end_threshold=..., machine_detection_silence_timeout=..., amd_status_callback=..., amd_status_callback_method=...): ...
    def stream(self, muted=..., hold=..., coaching=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, muted=..., hold=..., coaching=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, muted=..., hold=..., coaching=..., page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def get(self, call_sid): ...
    def __call__(self, call_sid): ...

class ParticipantPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class ParticipantContext(InstanceContext):
    def __init__(self, version, account_sid, conference_sid, call_sid) -> None: ...
    def fetch(self): ...
    def update(self, muted=..., hold=..., hold_url=..., hold_method=..., announce_url=..., announce_method=..., wait_url=..., wait_method=..., beep_on_exit=..., end_conference_on_exit=..., coaching=..., call_sid_to_coach=...): ...
    def delete(self): ...

class ParticipantInstance(InstanceResource):
    class Status:
        QUEUED: str
        CONNECTING: str
        RINGING: str
        CONNECTED: str
        COMPLETE: str
        FAILED: str
    def __init__(self, version, payload, account_sid, conference_sid, call_sid: Incomplete | None = ...) -> None: ...
    @property
    def account_sid(self): ...
    @property
    def call_sid(self): ...
    @property
    def label(self): ...
    @property
    def call_sid_to_coach(self): ...
    @property
    def coaching(self): ...
    @property
    def conference_sid(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def end_conference_on_exit(self): ...
    @property
    def muted(self): ...
    @property
    def hold(self): ...
    @property
    def start_conference_on_enter(self): ...
    @property
    def status(self): ...
    @property
    def uri(self): ...
    def fetch(self): ...
    def update(self, muted=..., hold=..., hold_url=..., hold_method=..., announce_url=..., announce_method=..., wait_url=..., wait_method=..., beep_on_exit=..., end_conference_on_exit=..., coaching=..., call_sid_to_coach=...): ...
    def delete(self): ...
