from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, serialize as serialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from twilio.rest.api.v2010.account.conference.participant import ParticipantList as ParticipantList
from twilio.rest.api.v2010.account.conference.recording import RecordingList as RecordingList

class ConferenceList(ListResource):
    def __init__(self, version, account_sid) -> None: ...
    def stream(self, date_created_before=..., date_created=..., date_created_after=..., date_updated_before=..., date_updated=..., date_updated_after=..., friendly_name=..., status=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, date_created_before=..., date_created=..., date_created_after=..., date_updated_before=..., date_updated=..., date_updated_after=..., friendly_name=..., status=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, date_created_before=..., date_created=..., date_created_after=..., date_updated_before=..., date_updated=..., date_updated_after=..., friendly_name=..., status=..., page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class ConferencePage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class ConferenceContext(InstanceContext):
    def __init__(self, version, account_sid, sid) -> None: ...
    def fetch(self): ...
    def update(self, status=..., announce_url=..., announce_method=...): ...
    @property
    def participants(self): ...
    @property
    def recordings(self): ...

class ConferenceInstance(InstanceResource):
    class Status:
        INIT: str
        IN_PROGRESS: str
        COMPLETED: str
    class UpdateStatus:
        COMPLETED: str
    class ReasonConferenceEnded:
        CONFERENCE_ENDED_VIA_API: str
        PARTICIPANT_WITH_END_CONFERENCE_ON_EXIT_LEFT: str
        PARTICIPANT_WITH_END_CONFERENCE_ON_EXIT_KICKED: str
        LAST_PARTICIPANT_KICKED: str
        LAST_PARTICIPANT_LEFT: str
    def __init__(self, version, payload, account_sid, sid: Incomplete | None = ...) -> None: ...
    @property
    def account_sid(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def api_version(self): ...
    @property
    def friendly_name(self): ...
    @property
    def region(self): ...
    @property
    def sid(self): ...
    @property
    def status(self): ...
    @property
    def uri(self): ...
    @property
    def subresource_uris(self): ...
    @property
    def reason_conference_ended(self): ...
    @property
    def call_sid_ending_conference(self): ...
    def fetch(self): ...
    def update(self, status=..., announce_url=..., announce_method=...): ...
    @property
    def participants(self): ...
    @property
    def recordings(self): ...
