from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from twilio.rest.proxy.v1.service.phone_number import PhoneNumberList as PhoneNumberList
from twilio.rest.proxy.v1.service.session import SessionList as SessionList
from twilio.rest.proxy.v1.service.short_code import ShortCodeList as ShortCodeList

class ServiceList(ListResource):
    def __init__(self, version) -> None: ...
    def stream(self, limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def create(self, unique_name, default_ttl=..., callback_url=..., geo_match_level=..., number_selection_behavior=..., intercept_callback_url=..., out_of_session_callback_url=..., chat_instance_sid=...): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class ServicePage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class ServiceContext(InstanceContext):
    def __init__(self, version, sid) -> None: ...
    def fetch(self): ...
    def delete(self): ...
    def update(self, unique_name=..., default_ttl=..., callback_url=..., geo_match_level=..., number_selection_behavior=..., intercept_callback_url=..., out_of_session_callback_url=..., chat_instance_sid=...): ...
    @property
    def sessions(self): ...
    @property
    def phone_numbers(self): ...
    @property
    def short_codes(self): ...

class ServiceInstance(InstanceResource):
    class GeoMatchLevel:
        AREA_CODE: str
        OVERLAY: str
        RADIUS: str
        COUNTRY: str
    class NumberSelectionBehavior:
        AVOID_STICKY: str
        PREFER_STICKY: str
    def __init__(self, version, payload, sid: Incomplete | None = ...) -> None: ...
    @property
    def sid(self): ...
    @property
    def unique_name(self): ...
    @property
    def account_sid(self): ...
    @property
    def chat_instance_sid(self): ...
    @property
    def callback_url(self): ...
    @property
    def default_ttl(self): ...
    @property
    def number_selection_behavior(self): ...
    @property
    def geo_match_level(self): ...
    @property
    def intercept_callback_url(self): ...
    @property
    def out_of_session_callback_url(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def url(self): ...
    @property
    def links(self): ...
    def fetch(self): ...
    def delete(self): ...
    def update(self, unique_name=..., default_ttl=..., callback_url=..., geo_match_level=..., number_selection_behavior=..., intercept_callback_url=..., out_of_session_callback_url=..., chat_instance_sid=...): ...
    @property
    def sessions(self): ...
    @property
    def phone_numbers(self): ...
    @property
    def short_codes(self): ...
