from twilio.base import deserialize as deserialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page

class AnnotationList(ListResource):
    def __init__(self, version, call_sid) -> None: ...
    def get(self): ...
    def __call__(self): ...

class AnnotationPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class AnnotationContext(InstanceContext):
    def __init__(self, version, call_sid) -> None: ...
    def update(self, answered_by=..., connectivity_issue=..., quality_issues=..., spam=..., call_score=..., comment=..., incident=...): ...
    def fetch(self): ...

class AnnotationInstance(InstanceResource):
    class AnsweredBy:
        UNKNOWN_ANSWERED_BY: str
        HUMAN: str
        MACHINE: str
    class ConnectivityIssue:
        UNKNOWN_CONNECTIVITY_ISSUE: str
        NO_CONNECTIVITY_ISSUE: str
        INVALID_NUMBER: str
        CALLER_ID: str
        DROPPED_CALL: str
        NUMBER_REACHABILITY: str
    class QualityIssues:
        UNKNOWN_QUALITY_ISSUE: str
        NO_QUALITY_ISSUE: str
        LOW_VOLUME: str
        CHOPPY_ROBOTIC: str
        ECHO: str
        DTMF: str
        LATENCY: str
        OWA: str
        STATIC_NOISE: str
    def __init__(self, version, payload, call_sid) -> None: ...
    @property
    def call_sid(self): ...
    @property
    def account_sid(self): ...
    @property
    def answered_by(self): ...
    @property
    def connectivity_issue(self): ...
    @property
    def quality_issues(self): ...
    @property
    def spam(self): ...
    @property
    def call_score(self): ...
    @property
    def comment(self): ...
    @property
    def incident(self): ...
    @property
    def url(self): ...
    def update(self, answered_by=..., connectivity_issue=..., quality_issues=..., spam=..., call_score=..., comment=..., incident=...): ...
    def fetch(self): ...
