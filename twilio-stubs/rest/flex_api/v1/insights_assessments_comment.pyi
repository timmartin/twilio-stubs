from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, values as values
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page

class InsightsAssessmentsCommentList(ListResource):
    def __init__(self, version) -> None: ...
    def create(self, category_id, category_name, comment, segment_id, user_name, user_email, agent_id, offset, token=...): ...
    def stream(self, segment_id=..., agent_id=..., token=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, segment_id=..., agent_id=..., token=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, segment_id=..., agent_id=..., token=..., page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...

class InsightsAssessmentsCommentPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class InsightsAssessmentsCommentInstance(InstanceResource):
    def __init__(self, version, payload) -> None: ...
    @property
    def account_sid(self): ...
    @property
    def assessment_id(self): ...
    @property
    def comment(self): ...
    @property
    def offset(self): ...
    @property
    def report(self): ...
    @property
    def weight(self): ...
    @property
    def agent_id(self): ...
    @property
    def segment_id(self): ...
    @property
    def user_name(self): ...
    @property
    def user_email(self): ...
    @property
    def timestamp(self): ...
    @property
    def url(self): ...
