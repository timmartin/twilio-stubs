from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from twilio.rest.trunking.v1.trunk.credential_list import CredentialListList as CredentialListList
from twilio.rest.trunking.v1.trunk.ip_access_control_list import IpAccessControlListList as IpAccessControlListList
from twilio.rest.trunking.v1.trunk.origination_url import OriginationUrlList as OriginationUrlList
from twilio.rest.trunking.v1.trunk.phone_number import PhoneNumberList as PhoneNumberList
from twilio.rest.trunking.v1.trunk.recording import RecordingList as RecordingList

class TrunkList(ListResource):
    def __init__(self, version) -> None: ...
    def create(self, friendly_name=..., domain_name=..., disaster_recovery_url=..., disaster_recovery_method=..., transfer_mode=..., secure=..., cnam_lookup_enabled=..., transfer_caller_id=...): ...
    def stream(self, limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class TrunkPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class TrunkContext(InstanceContext):
    def __init__(self, version, sid) -> None: ...
    def fetch(self): ...
    def delete(self): ...
    def update(self, friendly_name=..., domain_name=..., disaster_recovery_url=..., disaster_recovery_method=..., transfer_mode=..., secure=..., cnam_lookup_enabled=..., transfer_caller_id=...): ...
    @property
    def origination_urls(self): ...
    @property
    def credentials_lists(self): ...
    @property
    def ip_access_control_lists(self): ...
    @property
    def phone_numbers(self): ...
    @property
    def recordings(self): ...

class TrunkInstance(InstanceResource):
    class TransferSetting:
        DISABLE_ALL: str
        ENABLE_ALL: str
        SIP_ONLY: str
    class TransferCallerId:
        FROM_TRANSFEREE: str
        FROM_TRANSFEROR: str
    def __init__(self, version, payload, sid: Incomplete | None = ...) -> None: ...
    @property
    def account_sid(self): ...
    @property
    def domain_name(self): ...
    @property
    def disaster_recovery_method(self): ...
    @property
    def disaster_recovery_url(self): ...
    @property
    def friendly_name(self): ...
    @property
    def secure(self): ...
    @property
    def recording(self): ...
    @property
    def transfer_mode(self): ...
    @property
    def transfer_caller_id(self): ...
    @property
    def cnam_lookup_enabled(self): ...
    @property
    def auth_type(self): ...
    @property
    def auth_type_set(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def sid(self): ...
    @property
    def url(self): ...
    @property
    def links(self): ...
    def fetch(self): ...
    def delete(self): ...
    def update(self, friendly_name=..., domain_name=..., disaster_recovery_url=..., disaster_recovery_method=..., transfer_mode=..., secure=..., cnam_lookup_enabled=..., transfer_caller_id=...): ...
    @property
    def origination_urls(self): ...
    @property
    def credentials_lists(self): ...
    @property
    def ip_access_control_lists(self): ...
    @property
    def phone_numbers(self): ...
    @property
    def recordings(self): ...
