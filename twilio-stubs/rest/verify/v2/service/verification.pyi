from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, serialize as serialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page

class VerificationList(ListResource):
    def __init__(self, version, service_sid) -> None: ...
    def create(self, to, channel, custom_friendly_name=..., custom_message=..., send_digits=..., locale=..., custom_code=..., amount=..., payee=..., rate_limits=..., channel_configuration=..., app_hash=..., template_sid=..., template_custom_substitutions=..., device_ip=...): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class VerificationPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class VerificationContext(InstanceContext):
    def __init__(self, version, service_sid, sid) -> None: ...
    def update(self, status): ...
    def fetch(self): ...

class VerificationInstance(InstanceResource):
    class Channel:
        SMS: str
        CALL: str
        EMAIL: str
        WHATSAPP: str
        SNA: str
    class Status:
        CANCELED: str
        APPROVED: str
    def __init__(self, version, payload, service_sid, sid: Incomplete | None = ...) -> None: ...
    @property
    def sid(self): ...
    @property
    def service_sid(self): ...
    @property
    def account_sid(self): ...
    @property
    def to(self): ...
    @property
    def channel(self): ...
    @property
    def status(self): ...
    @property
    def valid(self): ...
    @property
    def lookup(self): ...
    @property
    def amount(self): ...
    @property
    def payee(self): ...
    @property
    def send_code_attempts(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def sna(self): ...
    @property
    def url(self): ...
    def update(self, status): ...
    def fetch(self): ...
