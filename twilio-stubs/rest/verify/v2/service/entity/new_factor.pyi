from twilio.base import deserialize as deserialize, serialize as serialize, values as values
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page

class NewFactorList(ListResource):
    def __init__(self, version, service_sid, identity) -> None: ...
    def create(self, friendly_name, factor_type, binding_alg=..., binding_public_key=..., config_app_id=..., config_notification_platform=..., config_notification_token=..., config_sdk_version=..., binding_secret=..., config_time_step=..., config_skew=..., config_code_length=..., config_alg=..., metadata=...): ...

class NewFactorPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class NewFactorInstance(InstanceResource):
    class FactorStatuses:
        UNVERIFIED: str
        VERIFIED: str
    class FactorTypes:
        PUSH: str
        TOTP: str
    class NotificationPlatforms:
        APN: str
        FCM: str
        NONE: str
    class TotpAlgorithms:
        SHA1: str
        SHA256: str
        SHA512: str
    def __init__(self, version, payload, service_sid, identity) -> None: ...
    @property
    def sid(self): ...
    @property
    def account_sid(self): ...
    @property
    def service_sid(self): ...
    @property
    def entity_sid(self): ...
    @property
    def identity(self): ...
    @property
    def binding(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def friendly_name(self): ...
    @property
    def status(self): ...
    @property
    def factor_type(self): ...
    @property
    def config(self): ...
    @property
    def metadata(self): ...
    @property
    def url(self): ...
