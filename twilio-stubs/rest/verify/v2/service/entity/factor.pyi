from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page

class FactorList(ListResource):
    def __init__(self, version, service_sid, identity) -> None: ...
    def stream(self, limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class FactorPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class FactorContext(InstanceContext):
    def __init__(self, version, service_sid, identity, sid) -> None: ...
    def delete(self): ...
    def fetch(self): ...
    def update(self, auth_payload=..., friendly_name=..., config_notification_token=..., config_sdk_version=..., config_time_step=..., config_skew=..., config_code_length=..., config_alg=..., config_notification_platform=...): ...

class FactorInstance(InstanceResource):
    class FactorStatuses:
        UNVERIFIED: str
        VERIFIED: str
    class FactorTypes:
        PUSH: str
        TOTP: str
    class NotificationPlatforms:
        APN: str
        FCM: str
        NONE: str
    class TotpAlgorithms:
        SHA1: str
        SHA256: str
        SHA512: str
    def __init__(self, version, payload, service_sid, identity, sid: Incomplete | None = ...) -> None: ...
    @property
    def sid(self): ...
    @property
    def account_sid(self): ...
    @property
    def service_sid(self): ...
    @property
    def entity_sid(self): ...
    @property
    def identity(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def friendly_name(self): ...
    @property
    def status(self): ...
    @property
    def factor_type(self): ...
    @property
    def config(self): ...
    @property
    def metadata(self): ...
    @property
    def url(self): ...
    def delete(self): ...
    def fetch(self): ...
    def update(self, auth_payload=..., friendly_name=..., config_notification_token=..., config_sdk_version=..., config_time_step=..., config_skew=..., config_code_length=..., config_alg=..., config_notification_platform=...): ...
