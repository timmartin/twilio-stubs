from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, serialize as serialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from twilio.rest.verify.v2.service.entity.challenge.notification import NotificationList as NotificationList

class ChallengeList(ListResource):
    def __init__(self, version, service_sid, identity) -> None: ...
    def create(self, factor_sid, expiration_date=..., details_message=..., details_fields=..., hidden_details=..., auth_payload=...): ...
    def stream(self, factor_sid=..., status=..., order=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, factor_sid=..., status=..., order=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, factor_sid=..., status=..., order=..., page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class ChallengePage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class ChallengeContext(InstanceContext):
    def __init__(self, version, service_sid, identity, sid) -> None: ...
    def fetch(self): ...
    def update(self, auth_payload=..., metadata=...): ...
    @property
    def notifications(self): ...

class ChallengeInstance(InstanceResource):
    class ChallengeStatuses:
        PENDING: str
        EXPIRED: str
        APPROVED: str
        DENIED: str
    class ChallengeReasons:
        NONE: str
        NOT_NEEDED: str
        NOT_REQUESTED: str
    class FactorTypes:
        PUSH: str
        TOTP: str
    class ListOrders:
        ASC: str
        DESC: str
    def __init__(self, version, payload, service_sid, identity, sid: Incomplete | None = ...) -> None: ...
    @property
    def sid(self): ...
    @property
    def account_sid(self): ...
    @property
    def service_sid(self): ...
    @property
    def entity_sid(self): ...
    @property
    def identity(self): ...
    @property
    def factor_sid(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def date_responded(self): ...
    @property
    def expiration_date(self): ...
    @property
    def status(self): ...
    @property
    def responded_reason(self): ...
    @property
    def details(self): ...
    @property
    def hidden_details(self): ...
    @property
    def metadata(self): ...
    @property
    def factor_type(self): ...
    @property
    def url(self): ...
    @property
    def links(self): ...
    def fetch(self): ...
    def update(self, auth_payload=..., metadata=...): ...
    @property
    def notifications(self): ...
