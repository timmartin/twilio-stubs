from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, serialize as serialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from twilio.rest.preview.understand.assistant.assistant_fallback_actions import AssistantFallbackActionsList as AssistantFallbackActionsList
from twilio.rest.preview.understand.assistant.assistant_initiation_actions import AssistantInitiationActionsList as AssistantInitiationActionsList
from twilio.rest.preview.understand.assistant.dialogue import DialogueList as DialogueList
from twilio.rest.preview.understand.assistant.field_type import FieldTypeList as FieldTypeList
from twilio.rest.preview.understand.assistant.model_build import ModelBuildList as ModelBuildList
from twilio.rest.preview.understand.assistant.query import QueryList as QueryList
from twilio.rest.preview.understand.assistant.style_sheet import StyleSheetList as StyleSheetList
from twilio.rest.preview.understand.assistant.task import TaskList as TaskList

class AssistantList(ListResource):
    def __init__(self, version) -> None: ...
    def stream(self, limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def create(self, friendly_name=..., log_queries=..., unique_name=..., callback_url=..., callback_events=..., fallback_actions=..., initiation_actions=..., style_sheet=...): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class AssistantPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class AssistantContext(InstanceContext):
    def __init__(self, version, sid) -> None: ...
    def fetch(self): ...
    def update(self, friendly_name=..., log_queries=..., unique_name=..., callback_url=..., callback_events=..., fallback_actions=..., initiation_actions=..., style_sheet=...): ...
    def delete(self): ...
    @property
    def field_types(self): ...
    @property
    def tasks(self): ...
    @property
    def model_builds(self): ...
    @property
    def queries(self): ...
    @property
    def assistant_fallback_actions(self): ...
    @property
    def assistant_initiation_actions(self): ...
    @property
    def dialogues(self): ...
    @property
    def style_sheet(self): ...

class AssistantInstance(InstanceResource):
    def __init__(self, version, payload, sid: Incomplete | None = ...) -> None: ...
    @property
    def account_sid(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def friendly_name(self): ...
    @property
    def latest_model_build_sid(self): ...
    @property
    def links(self): ...
    @property
    def log_queries(self): ...
    @property
    def sid(self): ...
    @property
    def unique_name(self): ...
    @property
    def url(self): ...
    @property
    def callback_url(self): ...
    @property
    def callback_events(self): ...
    def fetch(self): ...
    def update(self, friendly_name=..., log_queries=..., unique_name=..., callback_url=..., callback_events=..., fallback_actions=..., initiation_actions=..., style_sheet=...): ...
    def delete(self): ...
    @property
    def field_types(self): ...
    @property
    def tasks(self): ...
    @property
    def model_builds(self): ...
    @property
    def queries(self): ...
    @property
    def assistant_fallback_actions(self): ...
    @property
    def assistant_initiation_actions(self): ...
    @property
    def dialogues(self): ...
    @property
    def style_sheet(self): ...
