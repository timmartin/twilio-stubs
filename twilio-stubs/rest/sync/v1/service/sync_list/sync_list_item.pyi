from _typeshed import Incomplete
from twilio.base import deserialize as deserialize, serialize as serialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page

class SyncListItemList(ListResource):
    def __init__(self, version, service_sid, list_sid) -> None: ...
    def create(self, data, ttl=..., item_ttl=..., collection_ttl=...): ...
    def stream(self, order=..., from_=..., bounds=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def list(self, order=..., from_=..., bounds=..., limit: Incomplete | None = ..., page_size: Incomplete | None = ...): ...
    def page(self, order=..., from_=..., bounds=..., page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def get(self, index): ...
    def __call__(self, index): ...

class SyncListItemPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class SyncListItemContext(InstanceContext):
    def __init__(self, version, service_sid, list_sid, index) -> None: ...
    def fetch(self): ...
    def delete(self, if_match=...): ...
    def update(self, data=..., ttl=..., item_ttl=..., collection_ttl=..., if_match=...): ...

class SyncListItemInstance(InstanceResource):
    class QueryResultOrder:
        ASC: str
        DESC: str
    class QueryFromBoundType:
        INCLUSIVE: str
        EXCLUSIVE: str
    def __init__(self, version, payload, service_sid, list_sid, index: Incomplete | None = ...) -> None: ...
    @property
    def index(self): ...
    @property
    def account_sid(self): ...
    @property
    def service_sid(self): ...
    @property
    def list_sid(self): ...
    @property
    def url(self): ...
    @property
    def revision(self): ...
    @property
    def data(self): ...
    @property
    def date_expires(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def created_by(self): ...
    def fetch(self): ...
    def delete(self, if_match=...): ...
    def update(self, data=..., ttl=..., item_ttl=..., collection_ttl=..., if_match=...): ...
